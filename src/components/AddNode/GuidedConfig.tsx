import React from "react";
import { Form, Label, TextInput, Button } from "@patternfly/react-core";
import { PluginParameter } from "@fnndsc/chrisapi";
import SimpleDropdown from "./SimpleDropdown";
import { Plugin } from "@fnndsc/chrisapi";
import _ from "lodash";

interface GuidedConfigState {
  isOpen: boolean;
  componentList: any[];
  value: string;
  flag: string;
}

interface GuidedConfigProps {
  params: PluginParameter[];
  inputChange(id: number, paramName: string, value: string): void;
  userInput: {
    [key: number]: {
      [key: string]: string;
    };
  };

  plugin?: Plugin;
  deleteInput(input: string): void;
  handleAddComponent(): void;
  componentList: number;
  deleteComponent(): void;
}

class GuidedConfig extends React.Component<
  GuidedConfigProps,
  GuidedConfigState
> {
  constructor(props: GuidedConfigProps) {
    super(props);
    this.state = {
      isOpen: false,
      componentList: [],
      value: "",
      flag: ""
    };
  }


  handleInputChange = (
    value: string,
    event: React.FormEvent<HTMLInputElement>
  ) => {
    const { inputChange } = this.props;
    event.persist();
    const target = event.target as HTMLInputElement;
    const name = target.name;
    const id = parseInt(target.id);

    this.setState(
      {
        flag: name,
        value
      },
      () => {
        inputChange(id, this.state.flag, this.state.value);
      }
    );
  };

  renderRequiredParams = () => {
    const { params, userInput } = this.props;

    return params.map(param => {
      if (param.data.optional === false) {
        let testValue = "";
        if (!_.isEmpty(userInput)) {
          const test = userInput[param.data.id];
          if (test) {
            let value = Object.keys(test)[0];
            testValue = test[value];
          }
        }

        return (
          <Form className="required-params" key={param.data.id}>
            <Label className="required-label">{`${param.data.flag}:`}</Label>
            <TextInput
              aria-label="required-param"
              spellCheck={false}
              onChange={this.handleInputChange}
              name={param.data.name}
              className="required-param"
              placeholder={param.data.help}
              value={testValue || ""}
              id={`${param.data.id}`}
            />
          </Form>
        );
      }
    });
  };

  addParam = () => {
    const { handleAddComponent } = this.props;
    handleAddComponent();
  };

  renderDropdowns = () => {
    const {
      componentList,
      deleteInput,
      params,
      inputChange,
      userInput,
      deleteComponent
    } = this.props;

    let i = 1;
    let test: any[] = [];
    while (i <= componentList) {
      test = test.concat(
        <SimpleDropdown
          key={i}
          params={params}
          handleChange={inputChange}
          id={i}
          deleteComponent={deleteComponent}
          deleteInput={deleteInput}
          userInput={userInput}
        />
      );
      i++;
    }
    return test;
  };

  render() {
    const { userInput, plugin } = this.props;

    let generatedCommand = plugin && `${plugin.data.name}: `;

    for (let object in userInput) {
      const flag = Object.keys(userInput[object])[0];
      const value = userInput[object][flag];
      generatedCommand += ` --${flag} ${value}`;
    }

    return (
      <>
        <Button onClick={this.addParam} variant="primary">
          Add Configuration options
        </Button>

        <div className="config-container">
          <div className="generated-config">
            {this.renderRequiredParams()}
            {this.renderDropdowns()}
          </div>

          <div className="autogenerated-config">
            <Label className="autogenerated-label">Generated Command:</Label>
            <TextInput
              className="autogenerated-text"
              type="text"
              aria-label="autogenerated-config"
              value={generatedCommand}
            />
          </div>
        </div>
      </>
    );
  }
}

export default GuidedConfig;
