import React from "react";
import { Form, Label, TextInput, Button } from "@patternfly/react-core";
import { PluginParameter } from "@fnndsc/chrisapi";
import SimpleDropdown from "./SimpleDropdown";

interface GuidedConfigState {
  isOpen: boolean;
  componentList: any[];
  value: string;
  paramName: string;
}

interface GuidedConfigProps {
  params: PluginParameter[];
  inputChange(flag: string, value: string): void;
  userInput: {
    [key: string]: string;
  };
}

class GuidedConfig extends React.Component<
  GuidedConfigProps,
  GuidedConfigState
> {
  constructor(props: GuidedConfigProps) {
    super(props);
    this.state = {
      isOpen: false,
      componentList: [],
      value: "",
      paramName: ""
    };
  }

  handleInputChange = (
    value: string,
    event: React.FormEvent<HTMLInputElement>
  ) => {
    const { inputChange } = this.props;
    const { paramName } = this.state;
    event.persist();
    const target = event.target as HTMLInputElement;
    const name = target.name;
    console.log(name);

    this.setState(
      {
        value,
        paramName: name
      },
      () => {
        console.log(this.state.value, this.state.paramName);
        inputChange(this.state.paramName, this.state.value);
      }
    );
  };

  renderRequiredParams = () => {
    const { params } = this.props;

    return params.map(param => {
      if (param.data.optional === false) {
        return (
          <Form className="required-params" key={param.data.id}>
            <Label className="required-label">{param.data.flag}</Label>
            <TextInput
              css="test"
              aria-label="required-param"
              spellCheck={false}
              onChange={this.handleInputChange}
              name={param.data.name}
            />
          </Form>
        );
      }
    });
  };

  addParam = () => {
    const { componentList } = this.state;
    const { params, inputChange } = this.props;

    if (componentList.length < params.length) {
      const key = componentList.length;

      this.setState({
        componentList: [
          ...componentList,
          <SimpleDropdown
            key={key}
            params={params}
            handleChange={inputChange}
          />
        ]
      });
    } else {
      console.log(
        "You cannot add any mo  inputChange={inputChange}e parameters"
      );
    }
  };

  renderDropdowns = () => {
    const { componentList } = this.state;
    return componentList.map(component => component);
  };

  render() {
    const { userInput } = this.props;

    let generatedCommand = "";
    for (let i in userInput) {
      generatedCommand += `  ${i}  ${userInput[i]}`;
    }

    return (
      <>
        <Button css="test" onClick={this.addParam} variant="primary">
          Add Configuration options
        </Button>

        {this.renderRequiredParams()}
        {this.renderDropdowns()}

        <div className="autogenerated-config">
          <Label className="autogenerated-label">Generated Command:</Label>
          <TextInput
            className="autogenerated-text"
            type="text"
            aria-label="autogenerated-config"
            placeholder={`${generatedCommand}`}
          />
        </div>
      </>
    );
  }
}

export default GuidedConfig;
