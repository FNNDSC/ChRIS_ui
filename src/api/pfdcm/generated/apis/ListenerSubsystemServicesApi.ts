/* tslint:disable */
/* eslint-disable */
/**
 * pfdcm
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DcmtkDBPutModel,
  DcmtkDBReturnModel,
  HTTPValidationError,
  ListenerDBreturnModel,
  ListenerHandlerStatus,
  ModelsListenerModelValueStr,
  XinetdDBPutModel,
  XinetdDBReturnModel,
} from '../models/index';
import {
    DcmtkDBPutModelFromJSON,
    DcmtkDBPutModelToJSON,
    DcmtkDBReturnModelFromJSON,
    DcmtkDBReturnModelToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ListenerDBreturnModelFromJSON,
    ListenerDBreturnModelToJSON,
    ListenerHandlerStatusFromJSON,
    ListenerHandlerStatusToJSON,
    ModelsListenerModelValueStrFromJSON,
    ModelsListenerModelValueStrToJSON,
    XinetdDBPutModelFromJSON,
    XinetdDBPutModelToJSON,
    XinetdDBReturnModelFromJSON,
    XinetdDBReturnModelToJSON,
} from '../models/index';

export interface ItemPutDcmtkApiV1ListenerListenerObjNameDcmtkPutRequest {
    listenerObjName: string;
    dcmtkDBPutModel: DcmtkDBPutModel;
}

export interface ItemPutXinetdApiV1ListenerListenerObjNameXinetdPutRequest {
    listenerObjName: string;
    xinetdDBPutModel: XinetdDBPutModel;
}

export interface ListenerGetApiV1ListenerListenerObjNameGetRequest {
    listenerObjName: string;
}

export interface ListenerInitializeApiV1ListenerInitializePostRequest {
    modelsListenerModelValueStr: ModelsListenerModelValueStr;
}

export interface ListenerStatusGetApiV1ListenerStatusListenerObjNameGetRequest {
    listenerObjName: string;
}

/**
 * 
 */
export class ListenerSubsystemServicesApi extends runtime.BaseAPI {

    /**
     * PUT an entire dcmtk object. If the object already exists, overwrite. If it does not exist, append to the space of available objects.  Note that overwriting an existing object will replace ALL the `info` fields, thus leaving a default of `\"string\"` will literally put the text `string` for a specific field.  Parameters ----------  - `listenerObjName` : internal name of (new) object - `dcmtkInfo`       : new values for object internals
     * PUT a dcmtk update
     */
    async itemPutDcmtkApiV1ListenerListenerObjNameDcmtkPutRaw(requestParameters: ItemPutDcmtkApiV1ListenerListenerObjNameDcmtkPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DcmtkDBReturnModel>> {
        if (requestParameters['listenerObjName'] == null) {
            throw new runtime.RequiredError(
                'listenerObjName',
                'Required parameter "listenerObjName" was null or undefined when calling itemPutDcmtkApiV1ListenerListenerObjNameDcmtkPut().'
            );
        }

        if (requestParameters['dcmtkDBPutModel'] == null) {
            throw new runtime.RequiredError(
                'dcmtkDBPutModel',
                'Required parameter "dcmtkDBPutModel" was null or undefined when calling itemPutDcmtkApiV1ListenerListenerObjNameDcmtkPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/listener/{listenerObjName}/dcmtk/`.replace(`{${"listenerObjName"}}`, encodeURIComponent(String(requestParameters['listenerObjName']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DcmtkDBPutModelToJSON(requestParameters['dcmtkDBPutModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DcmtkDBReturnModelFromJSON(jsonValue));
    }

    /**
     * PUT an entire dcmtk object. If the object already exists, overwrite. If it does not exist, append to the space of available objects.  Note that overwriting an existing object will replace ALL the `info` fields, thus leaving a default of `\"string\"` will literally put the text `string` for a specific field.  Parameters ----------  - `listenerObjName` : internal name of (new) object - `dcmtkInfo`       : new values for object internals
     * PUT a dcmtk update
     */
    async itemPutDcmtkApiV1ListenerListenerObjNameDcmtkPut(requestParameters: ItemPutDcmtkApiV1ListenerListenerObjNameDcmtkPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DcmtkDBReturnModel> {
        const response = await this.itemPutDcmtkApiV1ListenerListenerObjNameDcmtkPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT an entire xinetd object. If the object already exists, overwrite. If it does not exist, append to the space of available objects.  Note that overwriting an existing object will replace ALL the `info` fields, thus leaving a default of `\"string\"` will literally put the text `string` for a specific field.  Parameters ----------  - `listenerObjName` : internal name of (new) object - `xinetdInfo`      : new values for object internals
     * PUT an xinetd update
     */
    async itemPutXinetdApiV1ListenerListenerObjNameXinetdPutRaw(requestParameters: ItemPutXinetdApiV1ListenerListenerObjNameXinetdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<XinetdDBReturnModel>> {
        if (requestParameters['listenerObjName'] == null) {
            throw new runtime.RequiredError(
                'listenerObjName',
                'Required parameter "listenerObjName" was null or undefined when calling itemPutXinetdApiV1ListenerListenerObjNameXinetdPut().'
            );
        }

        if (requestParameters['xinetdDBPutModel'] == null) {
            throw new runtime.RequiredError(
                'xinetdDBPutModel',
                'Required parameter "xinetdDBPutModel" was null or undefined when calling itemPutXinetdApiV1ListenerListenerObjNameXinetdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/listener/{listenerObjName}/xinetd/`.replace(`{${"listenerObjName"}}`, encodeURIComponent(String(requestParameters['listenerObjName']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: XinetdDBPutModelToJSON(requestParameters['xinetdDBPutModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => XinetdDBReturnModelFromJSON(jsonValue));
    }

    /**
     * PUT an entire xinetd object. If the object already exists, overwrite. If it does not exist, append to the space of available objects.  Note that overwriting an existing object will replace ALL the `info` fields, thus leaving a default of `\"string\"` will literally put the text `string` for a specific field.  Parameters ----------  - `listenerObjName` : internal name of (new) object - `xinetdInfo`      : new values for object internals
     * PUT an xinetd update
     */
    async itemPutXinetdApiV1ListenerListenerObjNameXinetdPut(requestParameters: ItemPutXinetdApiV1ListenerListenerObjNameXinetdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<XinetdDBReturnModel> {
        const response = await this.itemPutXinetdApiV1ListenerListenerObjNameXinetdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET the information pertinent to a `listenerObjName`  (for a list of valid `listenerObjName` GET the `serviceList`)
     * GET information for a given listener object
     */
    async listenerGetApiV1ListenerListenerObjNameGetRaw(requestParameters: ListenerGetApiV1ListenerListenerObjNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListenerDBreturnModel>> {
        if (requestParameters['listenerObjName'] == null) {
            throw new runtime.RequiredError(
                'listenerObjName',
                'Required parameter "listenerObjName" was null or undefined when calling listenerGetApiV1ListenerListenerObjNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/listener/{listenerObjName}/`.replace(`{${"listenerObjName"}}`, encodeURIComponent(String(requestParameters['listenerObjName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListenerDBreturnModelFromJSON(jsonValue));
    }

    /**
     * GET the information pertinent to a `listenerObjName`  (for a list of valid `listenerObjName` GET the `serviceList`)
     * GET information for a given listener object
     */
    async listenerGetApiV1ListenerListenerObjNameGet(requestParameters: ListenerGetApiV1ListenerListenerObjNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListenerDBreturnModel> {
        const response = await this.listenerGetApiV1ListenerListenerObjNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initialize the listener service for the object __objToInitialize__.  Parameters ---------- - `objToInitialize`:    name of the listener object to initialize  Return ------ - dictionary response from the initialization process  NOTE: A return / response model is not specified since the return from the  call is variable.
     * POST a signal to the listener `objToInitialize`, triggering a self initialization
     */
    async listenerInitializeApiV1ListenerInitializePostRaw(requestParameters: ListenerInitializeApiV1ListenerInitializePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['modelsListenerModelValueStr'] == null) {
            throw new runtime.RequiredError(
                'modelsListenerModelValueStr',
                'Required parameter "modelsListenerModelValueStr" was null or undefined when calling listenerInitializeApiV1ListenerInitializePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/listener/initialize/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelsListenerModelValueStrToJSON(requestParameters['modelsListenerModelValueStr']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Initialize the listener service for the object __objToInitialize__.  Parameters ---------- - `objToInitialize`:    name of the listener object to initialize  Return ------ - dictionary response from the initialization process  NOTE: A return / response model is not specified since the return from the  call is variable.
     * POST a signal to the listener `objToInitialize`, triggering a self initialization
     */
    async listenerInitializeApiV1ListenerInitializePost(requestParameters: ListenerInitializeApiV1ListenerInitializePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listenerInitializeApiV1ListenerInitializePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET the listener susystem information pertinent to a `listenerObjName`. This information indicates if the subsystem has been initialized and therefore if it is ready to accept incoming data.  (for a list of valid `listenerObjName` GET the `serviceList`)
     * GET the listener subsystem status of a given listener object
     */
    async listenerStatusGetApiV1ListenerStatusListenerObjNameGetRaw(requestParameters: ListenerStatusGetApiV1ListenerStatusListenerObjNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListenerHandlerStatus>> {
        if (requestParameters['listenerObjName'] == null) {
            throw new runtime.RequiredError(
                'listenerObjName',
                'Required parameter "listenerObjName" was null or undefined when calling listenerStatusGetApiV1ListenerStatusListenerObjNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/listener/status/{listenerObjName}/`.replace(`{${"listenerObjName"}}`, encodeURIComponent(String(requestParameters['listenerObjName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListenerHandlerStatusFromJSON(jsonValue));
    }

    /**
     * GET the listener susystem information pertinent to a `listenerObjName`. This information indicates if the subsystem has been initialized and therefore if it is ready to accept incoming data.  (for a list of valid `listenerObjName` GET the `serviceList`)
     * GET the listener subsystem status of a given listener object
     */
    async listenerStatusGetApiV1ListenerStatusListenerObjNameGet(requestParameters: ListenerStatusGetApiV1ListenerStatusListenerObjNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListenerHandlerStatus> {
        const response = await this.listenerStatusGetApiV1ListenerStatusListenerObjNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET the list of configured PACS services
     * GET the list of configured listener services
     */
    async serviceListGetApiV1ListenerListGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/listener/list/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET the list of configured PACS services
     * GET the list of configured listener services
     */
    async serviceListGetApiV1ListenerListGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<any>> {
        const response = await this.serviceListGetApiV1ListenerListGetRaw(initOverrides);
        return await response.value();
    }

}
